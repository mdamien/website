#flux{

    

    #flux-container{

        width: 100%;
        article{ 
            position: relative;
            display: inline-block;
            width: 100%;
            break-inside: avoid;

            //height
            min-height: $unite*2;


            *{ 
                display: inline-block;
                vertical-align: top;
            }

            .type{ width: $unite*3;}
            .update{ width: $unite*3.5;}
            h2 { width: calc( 100% - #{$unite*6.5} ); }
            [data-type="git"] h2 { @include text-overflow; }

            h3{ display: none;}

            ul.details{

                width: calc( 50% - #{$unite*6.5} );
                width: 100%;
                position: absolute;
                bottom: 0;
                left: 0;

                li{ 
                    display: inline-block;
                    width: 25%;

                    &:first-of-type{ width: calc( #{$unite*6.5} - #{$unite/5}); }
                    &:not(:first-of-type){ padding-left: $unite/5;}
                }
            }
        }
        @include for-size(phone) {
            width: inherit; 
            margin: 0 $margins-phone; // structure rules !!

            article h2{ width: 100% !important;}
        }

        @include for-size(desktop-900) {
            //2 columns
            @include column-count(2);
            @include column-gap();

            // Manage Tweet height compare to others
            article[data-lenght="140"] { min-height: $unite * 6;}
            article[data-lenght="280"] { min-height: $unite * 8;}

            // Avoid when 2 columns
            //article{ padding-bottom: 0; }
            //article ul.details{ position: relative;  bottom: inherit; left: inherit;}
            //article .details li:first-of-type{ width: 25%;} // back to initial state

            //@include column-width(50%);
        }

        @include for-size(desktop-1200) {

            // Manage Tweet height compare to others
            article[data-lenght="140"] { min-height: $unite * 4;}
            article[data-lenght="280"] { min-height: $unite * 6;}
        }            

        @include for-size(desktop-1800) {
            article {
                h2 {width: 50%}
                ul.details{ width: calc( 50% - #{$unite*6.5} ); }
            }           
        }
    }
}   
        
